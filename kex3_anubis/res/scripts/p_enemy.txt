//
// Copyright(C) 2014-2015 Samuel Villarreal
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//      AI/Monster Actions
//

//-----------------------------------------------------------------------------
//
// common actions
//
//-----------------------------------------------------------------------------

//
// A_ThrustZVelocity
//

void A_ThrustZVelocity(kActor @actor, const float speed)
{
    actor.Velocity().z = speed;
}

//
// A_GibDeath
//

void A_GibDeath(kActor @actor, const float offset)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + offset;
    kActor @gib = Game.SpawnActor("Fx_Gibs01", x, y, z, actor.Yaw(), actor.SectorIndex());
    
    if(!(gib is null))
    {
        gib.Scale() = actor.Scale();
    }
}

//
// A_Hide
//

void A_Hide(kActor @actor)
{
    actor.Flags() |= AF_HIDDEN;
}

//
// A_Show
//

void A_Show(kActor @actor)
{
    actor.Flags() &= ~AF_HIDDEN;
}

//-----------------------------------------------------------------------------
//
// anubis
//
//-----------------------------------------------------------------------------

//
// A_AnubisDeath
//

void A_AnubisDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/anubisdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/anubisdeath02.wav");
    }
}

//-----------------------------------------------------------------------------
//
// spider
//
//-----------------------------------------------------------------------------

//
// A_SpiderLeap
//

void A_SpiderLeap(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    kVec3 dir = (actor.GetTarget().Origin() - actor.Origin()).Normalize();
    
    actor.PlaySound("sounds/spidjump.wav");
    
    actor.Velocity().x = dir.x * 4;
    actor.Velocity().y = dir.y * 4;
    actor.Velocity().z = 15.0f;
}

//
// A_SpiderCheckGround
//

void A_SpiderCheckGround(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight()+1.024f)
    {
        actor.ChangeAnim("monsters/spider_base");
    }
}

//-----------------------------------------------------------------------------
//
// wasp
//
//-----------------------------------------------------------------------------

//
// A_WaspDeath
//

void A_WaspDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/waspdeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/waspdeath02.wav");
    }
}

//-----------------------------------------------------------------------------
//
// hawk
//
//-----------------------------------------------------------------------------

//
// A_BirdDeath
//

void A_BirdDeath(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    
    for(int i = 0; i < 7; ++i)
    {
        float ix = x + (Math::RandCFloat() * 64);
        float iy = y + (Math::RandCFloat() * 64);
        float iz = z + (Math::RandCFloat() * 16);
        
        Game.SpawnActor("Obj_Bird_Feathers", ix, iy, iz, 0, actor.SectorIndex());
    }
}

//
// A_FeatherDrop
//

void A_FeatherDrop(kActor @actor)
{
    if((actor.Origin().z + actor.Velocity().z) <= actor.FloorHeight()+1.024f)
    {
        actor.Remove();
    }
}

//
// A_BirdWander
//

void A_BirdWander(kActor @actor)
{
    if((actor.GameTicks() & 512) != 0)
    {
        actor.Yaw() += Math::Deg2Rad(1.5f);
    }
    else
    {
        actor.Yaw() -= Math::Deg2Rad(1.5f);
    }
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 2.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 2.0f;
}

//
// A_BirdRetreat
//

void A_BirdRetreat(kActor @actor)
{
    float minHeight;
    
    actor.Yaw() += Math::Deg2Rad(4.0f);
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 4.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 4.0f;
    
    minHeight = (actor.CeilingHeight() - actor.Height()) - 1.024f;
    
    if(actor.Velocity().z < 3.0f || (actor.Origin().z + actor.Velocity().z) >= minHeight)
    {
        actor.ChangeAnim("monsters/bird_fly_calm");
        actor.Velocity().Clear();
        actor.SetTarget(null);
    }
}

//-----------------------------------------------------------------------------
//
// mummy
//
//-----------------------------------------------------------------------------

//
// A_MummyDeath
//

void A_MummyDeath(kActor @actor)
{
    switch(Math::RandMax(3))
    {
    case 0:
        actor.PlaySound("sounds/mumdeath01.wav");
        break;
    case 1:
        actor.PlaySound("sounds/mumdeath02.wav");
        break;
    case 2:
        actor.PlaySound("sounds/mumdeath03.wav");
        break;
    }
}

//
// A_SetupRedCobraJoints
//

void A_SetupRedCobraJoints(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    kActor @j1;
    kActor @j2;
    kActor @j3;
    kActor @j4;
    kActor @j5;
    
    @j1 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j2 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j3 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j4 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j5 = Game.SpawnActor("Fx_RedCobraJoint", x, y, z, 0, actor.SectorIndex());
    
    j1.SetTarget(actor);
    j2.SetTarget(j1);
    j3.SetTarget(j2);
    j4.SetTarget(j3);
    j5.SetTarget(j4);
    
    j2.Scale() = 0.875f;
    j3.Scale() = 0.75f;
    j4.Scale() = 0.625f;
    j5.Scale() = 0.5f;
    
    actor.SetTaggedActor(j5);
}

//
// A_RedCobraExplode
//

void A_RedCobraExplode(kActor @actor)
{
    float x = actor.Origin().x + (Math::RandCFloat() * 32.0f);
    float y = actor.Origin().y + (Math::RandCFloat() * 32.0f);
    float z = actor.Origin().z + (Math::RandCFloat() * 32.0f);
    kActor @puff;
    
    @puff = Game.SpawnActor("Fx_RedCobraExplode", x, y, z, 0, actor.SectorIndex());
    
    if(puff is null)
    {
        return;
    }
    
    puff.PlaySound("sounds/pbexplode.wav");
}

//-----------------------------------------------------------------------------
//
// bastet
//
//-----------------------------------------------------------------------------

//
// A_BastetTryTeleport
//

void A_BastetTryTeleport(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    if((actor.Flags() & AF_HIDDEN) != 0)
    {
        A_BastetTryTeleportIn(actor);
        return;
    }
    
    if(actor.RandomDecision(14) || (Math::RandByte() & 63) != 0)
    {
        return;
    }
    
    actor.Velocity().Clear();
    actor.StepHeight() = 64.0f;
    actor.Flags() &= ~(AF_SOLID|AF_SHOOTABLE);
    actor.ChangeAnim("monsters/bastet_teleport_out");
}

//
// A_BastetPainTeleport
//

void A_BastetPainTeleport(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    if((actor.Flags() & AF_HIDDEN) != 0)
    {
        A_BastetTryTeleportIn(actor);
        return;
    }
    
    if((Math::RandByte() & 3) != 0)
    {
        return;
    }
    
    actor.Velocity().Clear();
    actor.StepHeight() = 64.0f;
    actor.Flags() &= ~(AF_SOLID|AF_SHOOTABLE);
    actor.ChangeAnim("monsters/bastet_teleport_out");
}

//
// A_BastetTryTeleportIn
//

void A_BastetTryTeleportIn(kActor @actor)
{
    if(actor.RandomDecision(30) || (Math::RandByte() & 7) != 0)
    {
        return;
    }
    
    actor.ChangeAnim("monsters/bastet_teleport_in");
}

//
// A_BastetCheckTeleport
//

void A_BastetCheckTeleport(kActor @actor)
{
    if((actor.Flags() & AF_HIDDEN) == 0)
    {
        if(!actor.RandomDecision(30) && (Math::RandByte() & 7) == 0)
        {
            actor.ChangeAnim("monsters/bastet_teleport_in");
        }
        return;
    }
    
    actor.ChangeAnim("monsters/bastet_chase");
}

//
// A_BastetTeleportIn
//

void A_BastetTeleportIn(kActor @actor)
{
    actor.Flags() |= (AF_SOLID|AF_SHOOTABLE);
    actor.StepHeight() = 48.0f;
}

//
// A_BastetScream
//

void A_BastetScream(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/bastetpain01.wav");
    }
    else
    {
        actor.PlaySound("sounds/bastetpain02.wav");
    }
}

//-----------------------------------------------------------------------------
//
// kilmaat sentry
//
//-----------------------------------------------------------------------------

//
// A_SentryChatter
//

void A_SentryChatter(kActor @actor)
{
    if(Math::RandFloat() < 0.95f)
    {
        return;
    }
    
    switch(Math::RandMax(3))
    {
    case 0:
        actor.PlaySound("sounds/sentryact02.wav");
        break;
    case 1:
        actor.PlaySound("sounds/sentryact03.wav");
        break;
    case 2:
        actor.PlaySound("sounds/sentryact04.wav");
        break;
    }
}

//
// A_SentryDeath
//

void A_SentryDeath(kActor @actor)
{
    if((Math::Rand() & 1) == 0)
    {
        actor.PlaySound("sounds/sentrydeath01.wav");
    }
    else
    {
        actor.PlaySound("sounds/sentrydeath02.wav");
    }
}

//-----------------------------------------------------------------------------
//
// lava mantis
//
//-----------------------------------------------------------------------------

//
// A_MantisThink
//

void A_MantisThink(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    if((actor.Flags() & AF_COLLIDEDWALL) != 0)
    {
        actor.Yaw() -= (actor.CollidedWallAngle() + 0.08f);
    }
    else if((Math::Rand() & 1) != 0)
    {
        actor.Yaw() += Math::RandCFloat() * 0.125f;
    }
    
    if((Math::Rand() & 255) <= 4)
    {
        if((actor.GameTicks() & 32) == 0)
        {
            kVec3 org = actor.GetTarget().Origin();
            org.z += actor.GetTarget().Height() * 0.5f;
            
            if(actor.CanSee(org, 2000))
            {
                actor.Velocity().Clear();
                actor.ChangeAnim("monsters/mantis_rise");
                return;
            }
        }
        
        actor.Velocity().Clear();
        actor.ChangeAnim("monsters/mantis_peak");
    }
    else
    {
        actor.Velocity().x = Math::Sin(actor.Yaw()) * 64.0f;
        actor.Velocity().y = Math::Cos(actor.Yaw()) * 64.0f;
        actor.Velocity().z = 0;
    }
}

//
// A_MantisAttack
//

void A_MantisAttack(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    float an, pitch;
    float c;
    float speed;
    kVec3 tVec;
    kVec3 dir;
    kActor @proj;
    
    @proj = actor.SpawnActor("Proj_Fireball", 0, 0, 192);
    
    if(proj is null)
    {
        return;
    }
    
    an = actor.Yaw() + (Math::RandCFloat() * 0.0625f);
    proj.Yaw() = an;
    
    speed = 8.0f + (Math::RandFloat() * 8.0f);
    
    tVec = actor.GetTarget().Origin();
    tVec.z += (actor.GetTarget().Height() * 0.5f);
    
    pitch = (tVec - proj.Origin()).ToPitch() + (Math::RandCFloat() * 0.0625f);
    c = Math::Cos(pitch);
    
    dir.x = (Math::Sin(an) * c) * speed;
    dir.y = (Math::Cos(an) * c) * speed;
    dir.z = Math::Sin(pitch) * speed;
    
    proj.SetTarget(actor);
    proj.Velocity() = dir;
}

//
// A_MantisSetBlocking
//

void A_MantisSetBlocking(kActor @actor, const int toggle)
{
    if(toggle >= 1)
    {
        actor.Flags() |= (AF_SOLID|AF_SHOOTABLE);
    }
    else
    {
        actor.Flags() &= ~(AF_SOLID|AF_SHOOTABLE);
    }
}

//
// A_MantisExplode
//

void A_MantisExplode(kActor @actor)
{
    A_SpawnBouncyBalls(actor, 192.0f);
}

//-----------------------------------------------------------------------------
//
// magic 8 ball
//
//-----------------------------------------------------------------------------

//
// A_StartCountdown
//

void A_StartCountdown(kActor @actor)
{
    actor.Flags() &= ~AF_SHOOTABLE;
    actor.Health() = 30;
}

//
// A_DetonateCountdown
//

void A_DetonateCountdown(kActor @actor)
{
    if(actor.Health() <= 1)
    {
        return;
    }
    
    if(--actor.Health() == 1)
    {
        if((actor.Flags() & AF_INWATER) != 0)
        {
            actor.ChangeAnim("misc/magic8ball_explode_water");
        }
        else
        {
            actor.ChangeAnim("misc/magic8ball_explode");
        }
    }
}

//-----------------------------------------------------------------------------
//
// set boss
//
//-----------------------------------------------------------------------------

//
// A_SetThink
//

void A_SetThink(kAI @ai)
{
    int threshold = (80 - (ai.Health() / 75)) / 4;
    ai.MoveSpeed() = threshold;
    
    if(ai.RandomDecision(30))
    {
        return;
    }
    
    if(Math::RandByte() <= 16)
    {
        ai.PlaySound("sounds/setact01.wav");
    }
    
    if(ai.Health() < 1500 && (Math::RandByte() & 1) == 0)
    {
        ai.Movement().Clear();
        ai.Velocity().Clear();
        
        ai.ChangeAnim("monsters/set_fire_souls");
    }
    else if(ai.Health() < 2000 && (Math::RandByte() & 3) == 0)
    {
        ai.Movement().Clear();
        ai.Velocity().Clear();
        
        ai.PainChance() = 0;
        
        ai.ChangeAnim("monsters/set_leap_start");
    }
}

//
// A_SetLeap
//

void A_SetLeap(kAI @ai)
{
    float speed = (ai.MoveSpeed() * 0.5f) + 5.0f;
    
    ai.Velocity().x = Math::Sin(ai.Yaw()) * speed;
    ai.Velocity().y = Math::Cos(ai.Yaw()) * speed;
    ai.Velocity().z = 30.0f;
    
    ai.Friction() = 1.0f;
}

//
// A_SetCheckGround
//

void A_SetCheckGround(kAI @ai)
{
    if(ai.Velocity().z > 0)
    {
        return;
    }
    
    if((ai.Origin().z + ai.Velocity().z) <= ai.FloorHeight()+2.048f)
    {
        ai.Movement().Clear();
        ai.Velocity().Clear();
        
        ai.Friction() = 0.5f;
        ai.PainChance() = 128;
        ai.ClearBurn();
        
        ai.ChangeAnim("monsters/set_leap_land");
    }
}

//
// A_SetDeath
//

void A_SetDeath(kActor @actor)
{
    actor.Height() = 80.0f;
    actor.Friction() = 0.5f;
    
    Game.FireRemoteEventFromTag(1010);
}

//-----------------------------------------------------------------------------
//
// selkis boss
//
//-----------------------------------------------------------------------------

//
// A_SelkisThink
//

void A_SelkisThink(kAI @ai)
{
    int threshold = (96 - (ai.Health() / 83)) / 4;
    ai.MoveSpeed() = threshold;
    
    if(ai.RandomDecision(30))
    {
        return;
    }
    
    if((Math::RandByte() & 7) == 4)
    {
        ai.PlaySound("sounds/selkisact.wav");
    }
    
    if((Math::RandByte() & 7) != 3)
    {
        return;
    }
    
    if(ai.Health() < 1000)
    {
        ai.ChangeAnim("monsters/selkis_malfunction2");
    }
    else if(ai.Health() < 2000)
    {
        ai.ChangeAnim("monsters/selkis_malfunction1");
    }
    else if(ai.Health() < 3000)
    {
        ai.ChangeAnim("monsters/selkis_wounded");
    }
}

//
// A_SelkisCountDown
//

void A_SelkisCountDown(kAI @actor, int bStart)
{
    float x, y, z;
    
    if(bStart == 1)
    {
        actor.Health() = 20;
        actor.PainChance() = 0;
        return;
    }
    
    if(--actor.Health() <= 0)
    {
        actor.PlaySound("sounds/selkisdeath.wav");
        actor.ChangeAnim("monsters/selkis_corpse");
        
        actor.Height() = 64.0f;
        actor.Radius() = 32.0f;
        
        for(int i = 0; i < 12; ++i)
        {
            x = Math::RandCFloat() * 80.0f;
            y = Math::RandCFloat() * 80.0f;
            z = Math::RandCFloat() * 80.0f;
    
            kActor @spider = actor.SpawnActor("AI_Spider", x, y, z);
            
            spider.Velocity().x = x;
            spider.Velocity().y = y;
            spider.Velocity().z = z;
            
            spider.Movement() = spider.Velocity();
        }
    
        Game.FireRemoteEventFromTag(1010);
        return;
    }
    
    if((Math::RandByte() & 1) == 0)
    {
        return;
    }
    
    x = Math::RandCFloat() * 128.0f;
    y = Math::RandCFloat() * 128.0f;
    z = Math::RandCFloat() * 128.0f;
    
    actor.SpawnActor("Fx_Explosion01", x, y, z + 192.0f);
}

//-----------------------------------------------------------------------------
//
// queen boss
//
//-----------------------------------------------------------------------------

int maxQueenSeeds = 0;

//
// A_QueenThink
//

void A_QueenThink(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    if(actor.Health() <= 2400)
    {
        actor.ChangeAnim("monsters/queen_pain");
        return;
    }
    
    kAngle angles = ((actor.GetTarget().Origin() - actor.Origin()).Normalize()).ToYaw();
    kAngle turnAngles = angles.Diff(actor.Yaw());
    kAngle strafeAngles;
    
    if(turnAngles > 0.025f)
    {
        actor.Yaw() += 0.025f;
    }
    else if(turnAngles < -0.025f)
    {
        actor.Yaw() -= 0.025f;
    }
    
    if(!actor.RandomDecision(14) && (Math::RandByte() & 7) == 0)
    {
        actor.ChangeAnim("monsters/queen_tail_missile");
    }
    
    if(actor.RandomDecision(62))
    {
        return;
    }
    
    if(Math::RandByte() <= 16)
    {
        actor.PlaySound("sounds/queenact02.wav");
    }
    
    strafeAngles = angles + (Math::RandCFloat() * Math::Deg2Rad(90.0f));
    
    if((Math::RandByte() & 1) != 0)
    {
        strafeAngles = -strafeAngles;
    }
    
    actor.Velocity().x = Math::Sin(strafeAngles) * 4.0f;
    actor.Velocity().y = Math::Cos(strafeAngles) * 4.0f;
}

//
// A_QueenThinkStumpy
//

void A_QueenThinkStumpy(kActor @actor)
{
    if(actor.RandomDecision(14))
    {
        return;
    }
    
    if(Math::RandByte() <= 16)
    {
        actor.PlaySound("sounds/queenatk03.wav");
    }
    
    if(actor.Health() <= 1200 && (Math::RandByte() & 1) != 0)
    {
        if(maxQueenSeeds < 8)
        {
            actor.ChangeAnim("monsters/queen_hurl");
        }
    }
    else if((Math::RandByte() & 7) == 0)
    {
        actor.ChangeAnim("monsters/queen_chase_charge");
    }
}

//
// A_QueenCheckState
//

void A_QueenCheckState(kActor @actor)
{
    if(actor.Health() > 2400)
    {
        actor.ChangeAnim("monsters/queen_base");
    }
}

//
// A_QueenCheckRefire
//

void A_QueenCheckRefire(kActor @actor)
{
    if((Math::RandByte() & 3) == 0)
    {
        actor.ChangeAnim("monsters/queen_chase");
        return;
    }
}

//
// A_QueenFireProjectile
//

void A_QueenFireProjectile(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    float an, pitch;
    float c;
    kVec3 tVec;
    kVec3 dir;
    kActor @proj;
    
    @proj = actor.SpawnActor("Proj_Seedling", 0, 0, 128);
    
    if(proj is null)
    {
        return;
    }
    
    an = ((actor.GetTarget().Origin() - actor.Origin()).Normalize()).ToYaw();
    proj.Yaw() = an;
    
    tVec = actor.GetTarget().Origin();
    tVec.z += (actor.GetTarget().Height() * 0.5f);
    
    pitch = (tVec - proj.Origin()).ToPitch();
    c = Math::Cos(pitch);
    
    dir.x = (Math::Sin(an) * c) * 32.0f;
    dir.y = (Math::Cos(an) * c) * 32.0f;
    dir.z = Math::Sin(pitch) * 32.0f;
    
    proj.SetTarget(actor);
    proj.Velocity() = dir;
}

//
// A_QueenAfterPain
//

void A_QueenAfterPain(kAI @actor)
{
    actor.Friction() = 0.5f;
    actor.MoveSpeed() = 8.0f;
}

//
// A_QueenChargeThink
//

void A_QueenChargeThink(kActor @actor)
{
    kActor @target = actor.GetTarget();
    
    if(target is null)
    {
        actor.ChangeAnim("monsters/queen_chase");
        return;
    }
    
    kVec3 dir = target.Origin() - actor.Origin();
    float turnAmount;
    float dist;
    float r;
    
    dist = dir.UnitSq();
    r = actor.Radius() + target.Radius();
    
    if(dist >= (192*192))
    {
        turnAmount = Math::Deg2Rad(11.25f);
    }
    else
    {
        turnAmount = Math::Deg2Rad(5.625f);
    }
    
    kAngle angles = dir.Normalize().ToYaw();
    kAngle turnAngles = angles.Diff(actor.Yaw());
    
    if(turnAngles > turnAmount)
    {
        actor.Yaw() += turnAmount;
    }
    else if(turnAngles < -turnAmount)
    {
        actor.Yaw() -= turnAmount;
    }
    
    actor.Friction() = 1.0f;
    
    actor.Velocity().x = Math::Sin(actor.Yaw()) * 16.0f;
    actor.Velocity().y = Math::Cos(actor.Yaw()) * 16.0f;
    
    if(dist <= (r * r))
    {
        target.InflictDamage(actor, 40);
        
        target.Velocity().x = actor.Velocity().x * 2.0f;
        target.Velocity().y = actor.Velocity().y * 2.0f;
        
        actor.Friction() = 0.5f;        
        actor.ChangeAnim("monsters/queen_after_charge");
    }
}

//
// A_QueenHurlSeedling
//

void A_QueenHurlSeedling(kActor @actor)
{
    kActor @seed;
    kVec3 dir;
    
    @seed = actor.SpawnActor("Obj_Seedling_Spawn", 0, 0, 128);
    
    if(seed is null)
    {
        return;
    }
    
    seed.Yaw() = actor.Yaw();
    
    seed.Velocity().x = Math::Sin(seed.Yaw()) * 32.0f;
    seed.Velocity().y = Math::Cos(seed.Yaw()) * 32.0f;
    
    maxQueenSeeds++;
}

//
// A_QueenSeedDeath
//

void A_QueenSeedDeath(kActor @actor)
{
    maxQueenSeeds--;
}

//
// AddSnakeTail
//

void AddSnakeTail(kActor @actor, int &in count)
{
    kActor @tail;
    
    if(--count < 0)
    {
        return;
    }
    
    @tail = actor.SpawnActor("Obj_Queen_Snake_Tail", 0, 0, 0);
    tail.SetTarget(actor);
    
    if(count == 0)
    {
        tail.Flags() |= AF_SHOOTABLE;
    }
    
    AddSnakeTail(tail, count);
}

//
// A_QueenSnakeSetup
//

void A_QueenSnakeSetup(kActor @actor)
{
    if(!(actor.GetTaggedActor() is null))
    {
        return;
    }
    
    kActor @tail;
    int count = 10;
    
    @tail = actor.SpawnActor("Obj_Queen_Snake_Tail", 0, 0, 0);
    tail.SetTarget(actor);
    actor.SetTaggedActor(tail);
    
    AddSnakeTail(tail, count);
}

//
// A_UpdateQueenTailJoints
//

void A_UpdateQueenTailJoints(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    actor.Origin().Lerp(actor.GetTarget().Origin(), 0.5f);
    actor.SetSector(actor.GetTarget().SectorIndex());
}

//
// A_QueenSnakeTailDeath
//

void A_QueenSnakeTailDeath(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    actor.GetTarget().Flags() |= AF_SHOOTABLE;
}

//
// A_QueenSnakeHop
//

void A_QueenSnakeHop(kAI @actor)
{
    if(actor.GetTarget() is null || Math::Fabs(actor.Velocity().z) > 0.01f)
    {
        return;
    }
    
    if((actor.GameTicks() & 512) == 0 &&
       (actor.AIFlags() & AIF_TURNING) == 0 &&
       (actor.AIFlags() & AIF_RETREATTURN) == 0)
    {
        kAngle angles = ((actor.GetTarget().Origin() - actor.Origin()).Normalize()).ToYaw();
        kAngle turnAngles = angles.Diff(actor.Yaw());
        float an;
        
        if(actor.Origin().Distance(actor.GetTarget().Origin()) < 1024.0f)
        {
            an = Math::Deg2Rad(22.5f);
        }
        else
        {
            an = Math::Deg2Rad(2.8125f);
        }
        
        if(turnAngles > an)
        {
            actor.Yaw() += an;
        }
        else if(turnAngles < -an)
        {
            actor.Yaw() -= an;
        }
    }
    
    if((Math::RandByte() & 31) != 0)
    {
        return;
    }
    
    actor.Velocity().z = Math::RandFloat() * 32.0f;
    
    if(actor.Origin().Distance(actor.GetTarget().Origin()) <= 512.0f)
    {
        actor.Velocity().z *= 0.5f;
    }
}

//
// A_QueenSnakeExplode
//

void A_QueenSnakeExplode(kActor @actor)
{
    float x, y, z;
    
    x = Math::RandCFloat() * 128.0f;
    y = Math::RandCFloat() * 128.0f;
    z = Math::RandCFloat() * 128.0f;
    
    actor.SpawnActor("Fx_Explosion01", x, y, z + 192.0f);
}

//
// A_QueenDeath
//

void A_QueenDeath(kActor @actor)
{
    actor.PlaySound("sounds/queenroar.wav");
    Game.FireRemoteEventFromTag(1010);
}

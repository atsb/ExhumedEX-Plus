//
// Copyright(C) 2014-2015 Samuel Villarreal
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//      Misc actions
//

//
// A_RandomItem
//

void A_RandomItem(kActor @actor)
{
    int r = Math::RandByte() & 7;
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + actor.Height();
    kActor @obj;
    
    if(r > 3)
    {
        return;
    }
    
    if((Math::RandByte()) >= 128)
    {
        @obj = Game.SpawnActor("Fx_AmmoSpawn", x, y, z, 0, actor.SectorIndex());
    }
    else
    {
        @obj = Game.SpawnActor("Fx_HealthSpawn", x, y, z, 0, actor.SectorIndex());
    }
    
    if(!(obj is null) && (Math::RandByte()) >= 128)
    {
        obj.Scale() = 2.0f;
    }
}

//
// A_SpawnBouncyBalls
//

void A_SpawnBouncyBalls(kActor @actor, const float offset)
{
    kVec3 dir;
    
    for(int i = 0; i < 20; ++i)
    {
         kActor @obj = actor.SpawnActor("Proj_Ra_Fire", 0, 0, offset);
    
        if(obj is null)
        {
            continue;
        }
        
        float an = Math::RandCFloat() * 3.14f;
        float amt = Math::RandCFloat() * 16.0f;
        
        dir.x = Math::Sin(an) * amt;
        dir.y = Math::Cos(an) * amt;
        dir.z = Math::RandFloat() * 24.0f;
        
        obj.Health() = 1;
        obj.Velocity() = dir;
    }
}

//
// A_SpawnCobraFromVase
//

void A_SpawnCobraFromVase(kActor @actor)
{
    kActor @obj;
    int angle;
    float an;
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    
    angle = ((Math::RandByte() << 8) | Math::RandByte()) & 0xFFF;
    
    an = actor.Yaw() + Math::Deg2Rad(float(angle) / (2048.0f / 360.0f));
    @obj = Game.SpawnActor("Proj_Cobra_Green", x, y, z + 20.0f, an, actor.SectorIndex());
    
    obj.Velocity().x = Math::Sin(an) * 16.0f;
    obj.Velocity().y = Math::Cos(an) * 16.0f;
}

//
// A_RandomVaseItem
//

void A_RandomVaseItem(kActor @actor)
{
    int r = Math::RandByte() & 7;
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z + actor.Height();
    kActor @obj;
    
    if((Math::RandByte() & 7) == 3 && !actor.RandomDecision(14) && !Game.LevelIsMapped())
    {
        Game.SpawnActor("Item_Map", x, y, z, 0, actor.SectorIndex());
        return;
    }

    switch(r)
    {
    case 0:
        if(Player.Artifacts() >= 16 && (Math::RandByte() & 7) >= 3)
        {
            @obj = Game.SpawnActor("Fx_AmmoSpawn", x, y, z, 0, actor.SectorIndex());
        }
        else
        {
            Game.SpawnActor("AI_Spider", x, y, z, 0, actor.SectorIndex());
            return;
        }
        break;
        
    case 1:
        if(Player.Artifacts() >= 1)
        {
            Game.SpawnActor("AI_Wasp", x, y, z, 0, actor.SectorIndex());
            return;
        }
        // fall through
        
    case 2:
        if(Player.Artifacts() >= 16)
        {
            A_SpawnBouncyBalls(actor, 64.0f);
            return;
        }
        // fall through
        
    case 3:
        @obj = Game.SpawnActor("Fx_AmmoSpawn", x, y, z, 0, actor.SectorIndex());
        break;
        
    case 4:
    case 5:
        @obj = Game.SpawnActor("Fx_HealthSpawn", x, y, z, 0, actor.SectorIndex());
        break;
        
    case 6:
        if(Player.Artifacts() >= 4)
        {
            A_SpawnCobraFromVase(actor);
            A_SpawnCobraFromVase(actor);
            A_SpawnCobraFromVase(actor);
        }
        break;
        
    default:
        return;
    }
    
    if(!(obj is null) && (Math::RandByte()) >= 128)
    {
        obj.Scale() = 2.0f;
    }
}

//
// A_SetRandomFrame
//

void A_SetRandomFrame(kActor @actor, const int max)
{
    actor.SetFrameID(Math::RandMax(max));
}

//
// A_SpawnOrbPickup
//

void A_SpawnOrbPickup(kActor @actor)
{
    kActor @orb;
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    
    switch(actor.Type())
    {
    case AT_MISC20: // Fx_HealthSpawn
        @orb = Game.SpawnActor("Item_Health", x, y, z, 0, actor.SectorIndex());
        break;
        
    case AT_MISC21: // Fx_AmmoSpawn
        @orb = Game.SpawnActor("Item_Ammo", x, y, z, 0, actor.SectorIndex());
        break;
        
    default:
        return;
    }
    
    if(orb is null)
    {
        return;
    }
    
    orb.Scale() = actor.Scale();
}

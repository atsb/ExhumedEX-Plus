//
// Copyright(C) 2014-2015 Samuel Villarreal
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//      Player Weapon Actions
//

//
// A_ThrowAmunBomb
//

float bombChargeThrow = 16.0f;

void A_ThrowAmunBomb(kActor @actor)
{
    float cp = Math::Cos(actor.Pitch());
    float x = 0;
    float y = 0;
    float z = 64.0f;
    kVec3 dir;
    kActor @bomb;
    
    dir.x = Math::Sin(actor.Yaw()) * cp;
    dir.y = Math::Cos(actor.Yaw()) * cp;
    dir.z = -Math::Sin(actor.Pitch());
    
    x += dir.x * actor.Radius();
    y += dir.y * actor.Radius();
    z += dir.z * actor.Radius();
    
    @bomb = actor.SpawnActor("Proj_AmunBomb", x, y, z);
    
    if(bomb is null)
    {
        return;
    }
    
    bomb.SetTarget(actor);
    bomb.Velocity() = (dir * bombChargeThrow);
    bomb.Velocity().z = 8.0f + ((bombChargeThrow + 8.0f) * dir.z);
    
    bombChargeThrow = 16.0f;
}

//
// A_ChargeBombThrow
//

void A_ChargeBombThrow(kActor @actor)
{
    bombChargeThrow += 0.2f;
    
    if(bombChargeThrow > 40.0f)
    {
        bombChargeThrow = 40.0f;
    }
}

//
// A_CStaffExplode
//

void A_CStaffExplode(kActor @actor)
{
    float x = actor.Origin().x + (Math::RandCFloat() * 32.0f);
    float y = actor.Origin().y + (Math::RandCFloat() * 32.0f);
    float z = actor.Origin().z + (Math::RandCFloat() * 32.0f);
    kActor @puff;
    
    @puff = Game.SpawnActor("Fx_GreenCobraExplode", x, y, z, 0, actor.SectorIndex());
    
    if(puff is null)
    {
        return;
    }
    
    puff.PlaySound("sounds/pbexplode.wav");
}

//
// A_SetupCobraJoints
//

void A_SetupCobraJoints(kActor @actor)
{
    float x = actor.Origin().x;
    float y = actor.Origin().y;
    float z = actor.Origin().z;
    kActor @j1;
    kActor @j2;
    kActor @j3;
    kActor @j4;
    kActor @j5;
    
    @j1 = Game.SpawnActor("Fx_GreenCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j2 = Game.SpawnActor("Fx_GreenCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j3 = Game.SpawnActor("Fx_GreenCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j4 = Game.SpawnActor("Fx_GreenCobraJoint", x, y, z, 0, actor.SectorIndex());
    @j5 = Game.SpawnActor("Fx_GreenCobraJoint", x, y, z, 0, actor.SectorIndex());
    
    j1.SetTarget(actor);
    j2.SetTarget(j1);
    j3.SetTarget(j2);
    j4.SetTarget(j3);
    j5.SetTarget(j4);
    
    j2.Scale() = 0.875f;
    j3.Scale() = 0.75f;
    j4.Scale() = 0.625f;
    j5.Scale() = 0.5f;
    
    actor.SetTaggedActor(j5);
}

//
// A_UpdateCobraJoints
//

void A_UpdateCobraJoints(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    actor.Origin().Lerp(actor.GetTarget().Origin(), 0.5f);
    actor.SetSector(actor.GetTarget().SectorIndex());
}

//
// A_DestroyCobraJoints
//

void A_DestroyCobraJoints(kActor @actor)
{
    kActor @j1;
    kActor @j2;
    kActor @j3;
    kActor @j4;
    kActor @j5;
    
    @j5 = actor.GetTaggedActor();
    @j4 = j5.GetTarget();
    @j3 = j4.GetTarget();
    @j2 = j3.GetTarget();
    @j1 = j2.GetTarget();
    
    j1.Remove();
    j2.Remove();
    j3.Remove();
    j4.Remove();
    j5.Remove();
}

//
// A_CobraSlither
//

void A_CobraSlither(kActor @actor)
{
    float t = actor.GameTicks();
    float speed = 8.0f;
    kActor @owner;
    
    kQuat rotation = kQuat(actor.Pitch(), -1, 0, 0) * kQuat(actor.Yaw(), 0, 0, -1);
    
    @owner = actor.GetTarget();
    
    if(!(owner is null))
    {
        if(owner.Type() == AT_SELKIS)
        {
            speed = 16.0f;
        }
    }
    
    actor.Velocity() = (kVec3(0, speed, 0) * rotation);
    actor.Velocity() -= (kVec3(4 * Math::Cos(t * 0.25f), 0, 0) * rotation);
}

//
// A_FireRa
//

void A_FireRa(kActor @actor)
{
    float offset;
    
    if((actor.GameTicks() & 1) == 0)
    {
        offset = 32.0f;
    }
    else
    {
        offset = -32.0f;
    }
    
    float x = (Math::Cos(-actor.Yaw()) * offset);
    float y = (Math::Sin(-actor.Yaw()) * offset);
    float z = 32.0f;
    float cp = Math::Cos(actor.Pitch());
    float sp = Math::Sin(actor.Pitch());
    kVec3 dir;
    kActor @ra;
    
    @ra = actor.SpawnActor("Proj_Ra_Fire", x, y, z);
    
    if(ra is null)
    {
        return;
    }
    
    float rAn = 0;

    switch(actor.GameTicks() & 7)
    {
    case 0:
    case 7:
        rAn = -0.25f;
        break;
    case 1:
    case 6:
        rAn = 0.25f;
        break;
    case 2:
    case 5:
        rAn = -0.08333f;
        break;
    case 3:
    case 4:
        rAn = 0.08333f;
        break;
    }
    
    dir.x = (Math::Sin(actor.Yaw() + rAn) * cp) * 16.0f;
    dir.y = (Math::Cos(actor.Yaw() + rAn) * cp) * 16.0f;
    dir.z = 12.0f + (18.0f * -sp);
    
    ra.SetTarget(actor);
    ra.Velocity() = dir;
}

//
// A_ChargeManacle
//

int manacleChargeTime = -1;

void A_ChargeManacle(kActor @actor)
{
    manacleChargeTime++;
    
    if(manacleChargeTime > 8)
    {
        manacleChargeTime = 8;
    }
}

//
// A_FireBolts
//

void A_FireBolts(kActor @actor)
{
    float x = (Math::Sin(actor.Yaw()) * 64.0f);
    float y = (Math::Cos(actor.Yaw()) * 64.0f);
    float z = 80.0f;
    float cp = Math::Cos(actor.Pitch());
    float sp = Math::Sin(actor.Pitch());
    
    for(int i = 0; i < manacleChargeTime+1; ++i)
    {
        float bx, by, bz;
        kVec3 dir;
        kActor @bolt;
        kActor @j1;
        kActor @j2;
        kActor @j3;
        kActor @j4;
        kActor @j5;
        kActor @j6;
        kActor @j7;
        
        @bolt = actor.SpawnActor("Proj_Beam", x, y, z);
        
        if(bolt is null)
        {
            continue;
        }
        
        bolt.Yaw() = actor.Yaw();
        bolt.Pitch() = actor.Pitch();
        
        dir.x = (Math::Sin(actor.Yaw()) * cp) * 16.0f;
        dir.y = (Math::Cos(actor.Yaw()) * cp) * 16.0f;
        dir.z = 16.0f * -sp;
        
        bolt.Velocity() = dir;
        bolt.SetTarget(actor);
        
        bx = bolt.Origin().x;
        by = bolt.Origin().y;
        bz = bolt.Origin().z;
        
        @j1 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        @j2 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        @j3 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        @j4 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        @j5 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        @j6 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        @j7 = Game.SpawnActor("Proj_Beam_Tail", bx, by, bz, bolt.Yaw(), bolt.SectorIndex());
        
        j1.SetTarget(bolt);
        j2.SetTarget(j1);
        j3.SetTarget(j2);
        j4.SetTarget(j3);
        j5.SetTarget(j4);
        j6.SetTarget(j5);
        j7.SetTarget(j6);
        
        bolt.SetTaggedActor(j7);
    }
    
    manacleChargeTime = -1;
}

//
// A_BoltJitter
//

void A_BoltJitter(kActor @actor)
{
    float r1 = Math::RandCFloat() * (0.392f * 2.0f);
    float r2 = Math::RandCFloat() * (0.392f * 2.0f);
    
    kQuat rotation = kQuat(0.125f + actor.Pitch() + r2, -1, 0, 0) * kQuat(0.125f + (actor.Yaw() + r1), 0, 0, -1);
    actor.Velocity() = (kVec3(0, 16, 0) * rotation);
}

//
// A_UpdateBoltTail
//

void A_UpdateBoltTail(kActor @actor)
{
    if(actor.GetTarget() is null)
    {
        return;
    }
    
    actor.Yaw() = actor.GetTarget().Yaw();
    actor.Origin().Lerp(actor.GetTarget().Origin(), 0.95f);
    actor.SetSector(actor.GetTarget().SectorIndex());
}

//
// A_DestroyBoltTails
//

void A_DestroyBoltTails(kActor @actor)
{
    kActor @j1;
    kActor @j2;
    kActor @j3;
    kActor @j4;
    kActor @j5;
    kActor @j6;
    kActor @j7;
    
    @j7 = actor.GetTaggedActor();
    @j6 = j7.GetTarget();
    @j5 = j6.GetTarget();
    @j4 = j5.GetTarget();
    @j3 = j4.GetTarget();
    @j2 = j3.GetTarget();
    @j1 = j2.GetTarget();
    
    j1.Remove();
    j2.Remove();
    j3.Remove();
    j4.Remove();
    j5.Remove();
    j6.Remove();
    j7.Remove();
}
